/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Body2 } from '../models';
import { Body3 } from '../models';
import { Body4 } from '../models';
import { Body5 } from '../models';
import { Body6 } from '../models';
import { NewUsersPermissionsUser } from '../models';
import { UsersPermissionsUser } from '../models';
/**
 * UsersPermissionsUserApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate a user account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send the reset password email link
         * @param {Body4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (body: Body4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authForgotPasswordPost.');
            }
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Login a user using the identifiers email and password
         * @param {Body3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (body: Body3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authLocalPost.');
            }
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user with the default role
         * @param {NewUsersPermissionsUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (body: NewUsersPermissionsUser, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authLocalRegisterPost.');
            }
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Successfull redirection after approving a provider
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            if (provider === null || provider === undefined) {
                throw new RequiredError('provider','Required parameter provider was null or undefined when calling authProviderCallbackGet.');
            }
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset user password with a code (resetToken)
         * @param {Body5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (body: Body5, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authResetPasswordPost.');
            }
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a confirmation email to user
         * @param {Body6} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (body: Body6, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authSendEmailConfirmationPost.');
            }
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Connect a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/connect/*`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all user documents
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (eq !== undefined) {
                localVarQueryParameter['_eq'] = eq;
            }

            if (ne !== undefined) {
                localVarQueryParameter['_ne'] = ne;
            }

            if (lt !== undefined) {
                localVarQueryParameter['_lt'] = lt;
            }

            if (lte !== undefined) {
                localVarQueryParameter['_lte'] = lte;
            }

            if (gt !== undefined) {
                localVarQueryParameter['_gt'] = gt;
            }

            if (gte !== undefined) {
                localVarQueryParameter['_gte'] = gte;
            }

            if (contains !== undefined) {
                localVarQueryParameter['_contains'] = contains;
            }

            if (containss !== undefined) {
                localVarQueryParameter['_containss'] = containss;
            }

            if (_in) {
                localVarQueryParameter['_in'] = _in;
            }

            if (nin) {
                localVarQueryParameter['_nin'] = nin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdDelete.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single user depending on his id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdGet.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing user
         * @param {NewUsersPermissionsUser} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (body: NewUsersPermissionsUser, id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersIdPut.');
            }
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the logged in user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for users
         * @param {string} id 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsSearchIdGet: async (id: string, limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling usersPermissionsSearchIdGet.');
            }
            const localVarPath = `/users-permissions/search/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (limit !== undefined) {
                localVarQueryParameter['_limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (eq !== undefined) {
                localVarQueryParameter['_eq'] = eq;
            }

            if (ne !== undefined) {
                localVarQueryParameter['_ne'] = ne;
            }

            if (lt !== undefined) {
                localVarQueryParameter['_lt'] = lt;
            }

            if (lte !== undefined) {
                localVarQueryParameter['_lte'] = lte;
            }

            if (gt !== undefined) {
                localVarQueryParameter['_gt'] = gt;
            }

            if (gte !== undefined) {
                localVarQueryParameter['_gte'] = gte;
            }

            if (contains !== undefined) {
                localVarQueryParameter['_contains'] = contains;
            }

            if (containss !== undefined) {
                localVarQueryParameter['_containss'] = containss;
            }

            if (_in) {
                localVarQueryParameter['_in'] = _in;
            }

            if (nin) {
                localVarQueryParameter['_nin'] = nin;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsUserApi - functional programming interface
 * @export
 */
export const UsersPermissionsUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Validate a user account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body5>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authEmailConfirmationGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send the reset password email link
         * @param {Body4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(body: Body4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body4>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authForgotPasswordPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login a user using the identifiers email and password
         * @param {Body3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(body: Body3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body3>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authLocalPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Register a new user with the default role
         * @param {NewUsersPermissionsUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(body: NewUsersPermissionsUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authLocalRegisterPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Successfull redirection after approving a provider
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body3>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authProviderCallbackGet(provider, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reset user password with a code (resetToken)
         * @param {Body5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(body: Body5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body5>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authResetPasswordPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send a confirmation email to user
         * @param {Body6} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(body: Body6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body6>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).authSendEmailConfirmationPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Connect a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body2>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).connectGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve all user documents
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an existing user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Body6>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single user depending on his id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing user
         * @param {NewUsersPermissionsUser} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(body: NewUsersPermissionsUser, id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the logged in user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersMeGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search for users
         * @param {string} id 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsSearchIdGet(id: string, limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await UsersPermissionsUserApiAxiosParamCreator(configuration).usersPermissionsSearchIdGet(id, limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersPermissionsUserApi - factory interface
 * @export
 */
export const UsersPermissionsUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Validate a user account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(options?: any): AxiosPromise<Body5> {
            return UsersPermissionsUserApiFp(configuration).authEmailConfirmationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Send the reset password email link
         * @param {Body4} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(body: Body4, options?: any): AxiosPromise<Body4> {
            return UsersPermissionsUserApiFp(configuration).authForgotPasswordPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Login a user using the identifiers email and password
         * @param {Body3} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(body: Body3, options?: any): AxiosPromise<Body3> {
            return UsersPermissionsUserApiFp(configuration).authLocalPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new user with the default role
         * @param {NewUsersPermissionsUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(body: NewUsersPermissionsUser, options?: any): AxiosPromise<UsersPermissionsUser> {
            return UsersPermissionsUserApiFp(configuration).authLocalRegisterPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Successfull redirection after approving a provider
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(provider: string, options?: any): AxiosPromise<Body3> {
            return UsersPermissionsUserApiFp(configuration).authProviderCallbackGet(provider, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset user password with a code (resetToken)
         * @param {Body5} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(body: Body5, options?: any): AxiosPromise<Body5> {
            return UsersPermissionsUserApiFp(configuration).authResetPasswordPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Send a confirmation email to user
         * @param {Body6} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(body: Body6, options?: any): AxiosPromise<Body6> {
            return UsersPermissionsUserApiFp(configuration).authSendEmailConfirmationPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Connect a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectGet(options?: any): AxiosPromise<Body2> {
            return UsersPermissionsUserApiFp(configuration).connectGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all user documents
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): AxiosPromise<Array<UsersPermissionsUser>> {
            return UsersPermissionsUserApiFp(configuration).usersGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing user
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(id: string, options?: any): AxiosPromise<Body6> {
            return UsersPermissionsUserApiFp(configuration).usersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single user depending on his id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: any): AxiosPromise<UsersPermissionsUser> {
            return UsersPermissionsUserApiFp(configuration).usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing user
         * @param {NewUsersPermissionsUser} body 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(body: NewUsersPermissionsUser, id: string, options?: any): AxiosPromise<UsersPermissionsUser> {
            return UsersPermissionsUserApiFp(configuration).usersIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the logged in user information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any): AxiosPromise<UsersPermissionsUser> {
            return UsersPermissionsUserApiFp(configuration).usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Search for users
         * @param {string} id 
         * @param {number} [limit] Maximum number of results possible
         * @param {string} [sort] Sort according to a specific field.
         * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
         * @param {string} [eq] Get entries that matches exactly your input
         * @param {string} [ne] Get records that are not equals to something
         * @param {string} [lt] Get record that are lower than a value
         * @param {string} [lte] Get records that are lower than or equal to a value
         * @param {string} [gt] Get records that are greater than a value
         * @param {string} [gte] Get records that are greater than  or equal a value
         * @param {string} [contains] Get records that contains a value
         * @param {string} [containss] Get records that contains (case sensitive) a value
         * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
         * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsSearchIdGet(id: string, limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any): AxiosPromise<Array<UsersPermissionsUser>> {
            return UsersPermissionsUserApiFp(configuration).usersPermissionsSearchIdGet(id, limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersPermissionsUserApi - object-oriented interface
 * @export
 * @class UsersPermissionsUserApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUserApi extends BaseAPI {
    /**
     * Validate a user account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authEmailConfirmationGet(options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authEmailConfirmationGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send the reset password email link
     * @param {Body4} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authForgotPasswordPost(body: Body4, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authForgotPasswordPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Login a user using the identifiers email and password
     * @param {Body3} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authLocalPost(body: Body3, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authLocalPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Register a new user with the default role
     * @param {NewUsersPermissionsUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authLocalRegisterPost(body: NewUsersPermissionsUser, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authLocalRegisterPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Successfull redirection after approving a provider
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authProviderCallbackGet(provider: string, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authProviderCallbackGet(provider, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Reset user password with a code (resetToken)
     * @param {Body5} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authResetPasswordPost(body: Body5, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authResetPasswordPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send a confirmation email to user
     * @param {Body6} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public authSendEmailConfirmationPost(body: Body6, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).authSendEmailConfirmationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Connect a provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public connectGet(options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).connectGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve all user documents
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {string} [eq] Get entries that matches exactly your input
     * @param {string} [ne] Get records that are not equals to something
     * @param {string} [lt] Get record that are lower than a value
     * @param {string} [lte] Get records that are lower than or equal to a value
     * @param {string} [gt] Get records that are greater than a value
     * @param {string} [gte] Get records that are greater than  or equal a value
     * @param {string} [contains] Get records that contains a value
     * @param {string} [containss] Get records that contains (case sensitive) a value
     * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
     * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersGet(limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete an existing user
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersIdDelete(id: string, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a single user depending on his id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersIdGet(id: string, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing user
     * @param {NewUsersPermissionsUser} body 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersIdPut(body: NewUsersPermissionsUser, id: string, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve the logged in user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersMeGet(options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for users
     * @param {string} id 
     * @param {number} [limit] Maximum number of results possible
     * @param {string} [sort] Sort according to a specific field.
     * @param {number} [start] Skip a specific number of entries (especially useful for pagination)
     * @param {string} [eq] Get entries that matches exactly your input
     * @param {string} [ne] Get records that are not equals to something
     * @param {string} [lt] Get record that are lower than a value
     * @param {string} [lte] Get records that are lower than or equal to a value
     * @param {string} [gt] Get records that are greater than a value
     * @param {string} [gte] Get records that are greater than  or equal a value
     * @param {string} [contains] Get records that contains a value
     * @param {string} [containss] Get records that contains (case sensitive) a value
     * @param {Array&lt;string&gt;} [_in] Get records that matches any value in the array of values
     * @param {Array&lt;string&gt;} [nin] Get records that doesn&#x27;t match any value in the array of values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUserApi
     */
    public usersPermissionsSearchIdGet(id: string, limit?: number, sort?: string, start?: number, eq?: string, ne?: string, lt?: string, lte?: string, gt?: string, gte?: string, contains?: string, containss?: string, _in?: Array<string>, nin?: Array<string>, options?: any) {
        return UsersPermissionsUserApiFp(this.configuration).usersPermissionsSearchIdGet(id, limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, options).then((request) => request(this.axios, this.basePath));
    }
}
