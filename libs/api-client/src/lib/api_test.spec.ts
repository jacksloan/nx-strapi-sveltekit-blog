/**
 * DOCUMENTATION
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("EmailEmailApi", () => {
  let instance: api.EmailEmailApi
  beforeEach(function() {
    instance = new api.EmailEmailApi(config)
  });

  test("emailPost", () => {
    const body: api.Body = undefined
    return expect(instance.emailPost(body, {})).resolves.toBe(null)
  })
  test("emailSettingsGet", () => {
    return expect(instance.emailSettingsGet({})).resolves.toBe(null)
  })
  test("emailTestPost", () => {
    const body: api.Body1 = undefined
    return expect(instance.emailTestPost(body, {})).resolves.toBe(null)
  })
})

describe("PostsApi", () => {
  let instance: api.PostsApi
  beforeEach(function() {
    instance = new api.PostsApi(config)
  });

  test("postsCountGet", () => {
    return expect(instance.postsCountGet({})).resolves.toBe(null)
  })
  test("postsGet", () => {
    const limit: number = 56
    const sort: string = "sort_example"
    const start: number = 56
    const eq: string = "eq_example"
    const ne: string = "ne_example"
    const lt: string = "lt_example"
    const lte: string = "lte_example"
    const gt: string = "gt_example"
    const gte: string = "gte_example"
    const contains: string = "contains_example"
    const containss: string = "containss_example"
    const _in: Array<string> = undefined
    const nin: Array<string> = undefined
    return expect(instance.postsGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, {})).resolves.toBe(null)
  })
  test("postsIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.postsIdDelete(id, {})).resolves.toBe(null)
  })
  test("postsIdGet", () => {
    const id: string = "id_example"
    return expect(instance.postsIdGet(id, {})).resolves.toBe(null)
  })
  test("postsIdPut", () => {
    const body: api.NewPosts = undefined
    const id: string = "id_example"
    return expect(instance.postsIdPut(body, id, {})).resolves.toBe(null)
  })
  test("postsPost", () => {
    const body: api.NewPosts = undefined
    return expect(instance.postsPost(body, {})).resolves.toBe(null)
  })
})

describe("UploadFileApi", () => {
  let instance: api.UploadFileApi
  beforeEach(function() {
    instance = new api.UploadFileApi(config)
  });

  test("uploadFilesCountGet", () => {
    return expect(instance.uploadFilesCountGet({})).resolves.toBe(null)
  })
  test("uploadFilesGet", () => {
    return expect(instance.uploadFilesGet({})).resolves.toBe(null)
  })
  test("uploadFilesIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.uploadFilesIdDelete(id, {})).resolves.toBe(null)
  })
  test("uploadFilesIdGet", () => {
    const id: string = "id_example"
    return expect(instance.uploadFilesIdGet(id, {})).resolves.toBe(null)
  })
  test("uploadPost", () => {
    const body: api.Body2 = undefined
    return expect(instance.uploadPost(body, {})).resolves.toBe(null)
  })
  test("uploadSearchIdGet", () => {
    const id: string = "id_example"
    return expect(instance.uploadSearchIdGet(id, {})).resolves.toBe(null)
  })
})

describe("UsersPermissionsRoleApi", () => {
  let instance: api.UsersPermissionsRoleApi
  beforeEach(function() {
    instance = new api.UsersPermissionsRoleApi(config)
  });

  test("usersPermissionsRolesGet", () => {
    const limit: number = 56
    const sort: string = "sort_example"
    const start: number = 56
    const eq: string = "eq_example"
    const ne: string = "ne_example"
    const lt: string = "lt_example"
    const lte: string = "lte_example"
    const gt: string = "gt_example"
    const gte: string = "gte_example"
    const contains: string = "contains_example"
    const containss: string = "containss_example"
    const _in: Array<string> = undefined
    const nin: Array<string> = undefined
    return expect(instance.usersPermissionsRolesGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, {})).resolves.toBe(null)
  })
  test("usersPermissionsRolesIdGet", () => {
    const id: string = "id_example"
    return expect(instance.usersPermissionsRolesIdGet(id, {})).resolves.toBe(null)
  })
  test("usersPermissionsRolesPost", () => {
    const body: api.NewUsersPermissionsRole = undefined
    return expect(instance.usersPermissionsRolesPost(body, {})).resolves.toBe(null)
  })
  test("usersPermissionsRolesRoleDelete", () => {
    const role: string = "role_example"
    return expect(instance.usersPermissionsRolesRoleDelete(role, {})).resolves.toBe(null)
  })
  test("usersPermissionsRolesRolePut", () => {
    const body: api.NewUsersPermissionsRole = undefined
    const role: string = "role_example"
    return expect(instance.usersPermissionsRolesRolePut(body, role, {})).resolves.toBe(null)
  })
})

describe("UsersPermissionsUserApi", () => {
  let instance: api.UsersPermissionsUserApi
  beforeEach(function() {
    instance = new api.UsersPermissionsUserApi(config)
  });

  test("authEmailConfirmationGet", () => {
    return expect(instance.authEmailConfirmationGet({})).resolves.toBe(null)
  })
  test("authForgotPasswordPost", () => {
    const body: api.Body4 = undefined
    return expect(instance.authForgotPasswordPost(body, {})).resolves.toBe(null)
  })
  test("authLocalPost", () => {
    const body: api.Body3 = undefined
    return expect(instance.authLocalPost(body, {})).resolves.toBe(null)
  })
  test("authLocalRegisterPost", () => {
    const body: api.NewUsersPermissionsUser = undefined
    return expect(instance.authLocalRegisterPost(body, {})).resolves.toBe(null)
  })
  test("authProviderCallbackGet", () => {
    const provider: string = "provider_example"
    return expect(instance.authProviderCallbackGet(provider, {})).resolves.toBe(null)
  })
  test("authResetPasswordPost", () => {
    const body: api.Body5 = undefined
    return expect(instance.authResetPasswordPost(body, {})).resolves.toBe(null)
  })
  test("authSendEmailConfirmationPost", () => {
    const body: api.Body6 = undefined
    return expect(instance.authSendEmailConfirmationPost(body, {})).resolves.toBe(null)
  })
  test("connectGet", () => {
    return expect(instance.connectGet({})).resolves.toBe(null)
  })
  test("usersGet", () => {
    const limit: number = 56
    const sort: string = "sort_example"
    const start: number = 56
    const eq: string = "eq_example"
    const ne: string = "ne_example"
    const lt: string = "lt_example"
    const lte: string = "lte_example"
    const gt: string = "gt_example"
    const gte: string = "gte_example"
    const contains: string = "contains_example"
    const containss: string = "containss_example"
    const _in: Array<string> = undefined
    const nin: Array<string> = undefined
    return expect(instance.usersGet(limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, {})).resolves.toBe(null)
  })
  test("usersIdDelete", () => {
    const id: string = "id_example"
    return expect(instance.usersIdDelete(id, {})).resolves.toBe(null)
  })
  test("usersIdGet", () => {
    const id: string = "id_example"
    return expect(instance.usersIdGet(id, {})).resolves.toBe(null)
  })
  test("usersIdPut", () => {
    const body: api.NewUsersPermissionsUser = undefined
    const id: string = "id_example"
    return expect(instance.usersIdPut(body, id, {})).resolves.toBe(null)
  })
  test("usersMeGet", () => {
    return expect(instance.usersMeGet({})).resolves.toBe(null)
  })
  test("usersPermissionsSearchIdGet", () => {
    const id: string = "id_example"
    const limit: number = 56
    const sort: string = "sort_example"
    const start: number = 56
    const eq: string = "eq_example"
    const ne: string = "ne_example"
    const lt: string = "lt_example"
    const lte: string = "lte_example"
    const gt: string = "gt_example"
    const gte: string = "gte_example"
    const contains: string = "contains_example"
    const containss: string = "containss_example"
    const _in: Array<string> = undefined
    const nin: Array<string> = undefined
    return expect(instance.usersPermissionsSearchIdGet(id, limit, sort, start, eq, ne, lt, lte, gt, gte, contains, containss, _in, nin, {})).resolves.toBe(null)
  })
})

